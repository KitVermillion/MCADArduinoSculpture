#include <SPFD5408_Adafruit_GFX.h>    
#include <SPFD5408_Adafruit_TFTLCD.h> 
#include <SPFD5408_TouchScreen.h>
#include <SD.h>
#include <SPI.h>
              
#define LCD_CS A3
#define LCD_CD A2 //LCD pins
#define LCD_WR A1 
#define LCD_RD A0   //NOTE!! the tft screen does not like mapping touch functions while drawing shapes AT THE SAME TIME
#define LCD_RESET A4 

#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
#define YP A2 
#define XM A3   //more LCD pins
#define YM 8  
#define XP 9 
#define SD_CS 10  // define SD card reading pin

#define SENSIBILITY 300
#define MINPRESSURE 10
#define MAXPRESSURE 1000
short TS_MINX=118;
short TS_MINY=112;      // min and max of the touch area on X and Y axis
short TS_MAXX=750;//956;
short TS_MAXY= 1200;//915;
TouchScreen ts = TouchScreen(XP, YP, XM, YM, SENSIBILITY);

const int CIRCLE_X = 0;
const int CIRCLE_Y = 1;     //mapping generated circles for x and y axis
const int CIRCLE_COLOR = 2;
const int CIRCLE_PREV_X = 3;
const int CIRCLE_IS_FILLED = 4;

const int NUM_CIRCLES = 10; //# of TOTAL circles generated

enum ScreenState {
  triangle,
  circles,
  photoCuts,      //setting enum for going through each state function
  button,
  photoOverlap,
  sideBySide
};

ScreenState state = button; 

int circleMatrix[NUM_CIRCLES][5] = {    //matrix for drawing circles 
    {
        0, // X offset
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    ,
    {
       0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    ,
    {
        0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
   ,
    {
        0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    ,
    {
        0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    ,
    {
        0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    ,
    {
        0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    ,
    {
        0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    ,
    {
        0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    ,
    {
        0, // X cordinate
        0, // Y
        0, //Color
        0, //previous X
        0, //is filled
    }
    
};


int timesClicked = 0; //setting times clicked as 0 to start 

void setup(void) {

  Serial.begin(9600);

  progmemPrintln(PSTR("TFT LCD test"));     // setup programming for sheild and tft screen

#ifdef USE_ADAFRUIT_SHIELD_PINOUT
  progmemPrintln(PSTR("Using Adafruit 2.8\" TFT Arduino Shield Pinout"));
#else
  progmemPrintln(PSTR("Using Adafruit 2.8\" TFT Breakout Board Pinout"));
#endif

  tft.reset();

  tft.begin(0x9341); 

  tft.setRotation(0); // rotation of the screen // for images and drawing

  if (!SD.begin(SD_CS)) {     //open the SD card, images must be 24bit, 200 by 300 pixels BMP files
    Serial.println(F("failed!"));
    return;
  }
  Serial.println(F("OK!"));
  timesClicked = 0;
  
  tft.fillScreen(BLACK);

  artistStatement();
  waitOneTouch();
 
}

void loop(void) {
  TSPoint p;

  if(state == triangle) {   //setting triangle state
   
     p = waitOneTouch();
     createTouchTriangle(p.x, p.y, 50);   //calibrate touch to to work with the triangle

      Serial.println("x:");
      Serial.println(p.x);
      Serial.println("y:");
      Serial.println(p.y);
     if(p.x > 150 && p.y > 150) {
        /* state transisiton code */
        delay(500);
        tft.fillScreen(BLACK);
        delay(500);
        state = circles;
     }
  } else if(state == circles) {   
    testfillCircles(10, BLACK);
    tft.fillScreen(BLACK);
    state = photoCuts;
    timesClicked = 0;
    //Do next state here
  } else if(state == button) {
      createButton(random(0, tft.width()), random(0, tft.height()));
      p = waitOneTouch();
      timesClicked ++;

      if(timesClicked > 10) {   //count number of touches 
        timesClicked = 0;
         tft.fillScreen(BLACK);
          tft.fillScreen(RED);
          tft.fillScreen(GREEN);
          tft.fillScreen(BLUE);
          tft.fillScreen(CYAN);
          tft.fillScreen(MAGENTA);
          tft.fillScreen(YELLOW);
          tft.fillScreen(BLUE);
          tft.fillScreen(RED);
          tft.fillScreen(GREEN);
          tft.fillScreen(BLUE);
          tft.fillScreen(CYAN);
          tft.fillScreen(GREEN);
          tft.fillScreen(BLUE);
          tft.fillScreen(CYAN);
          tft.fillScreen(MAGENTA);
          tft.fillScreen(YELLOW);
          state = triangle;
      }
  } else if(state == photoCuts) {
    //random(1, 6);
     tft.fillScreen(BLACK);

    String list[] = {"1","2","3","4","5","6"};  // create list of images to be shuffled through

    for (int a=0; a<6; a++){
       int r = random(a,5); //  random from a to 8 included.
       String temp = list[a];
       list[a] = list[r];
       list[r] = temp;
    }

    for (int a=0; a<6; a++){
       String temp = list[a] + ".bmp";
       switch(a) {
        case 0:
          bmpDraw(temp, 40, 0);
          break;
        case 1:
          bmpDraw(temp,  tft.width() / 2, tft.height() / 3);
          break;
        case 2:
          bmpDraw(temp, 40, tft.height() / 3);
          break;
        case 3:
          bmpDraw(temp, 40, (tft.height() / 3) * 2);
          break;
       case 4:
          bmpDraw(temp, tft.width() / 2, 0);
          break;
       case 5:
          bmpDraw(temp,  tft.width() / 2, (tft.height() / 3) * 2);
          break; 
      }
    }

    p = waitOneTouch();

    timesClicked++;

    if(timesClicked > 6) {
      timesClicked = 0;
      long startTime = millis();
       while(millis() - startTime < 20000){
         int randomXLine = random(0, tft.width());
         tft.drawLine(randomXLine, 0,randomXLine + random(-200, 200), tft.height(), WHITE);  
       }
      state = photoOverlap;
      tft.fillScreen(BLACK);   
    }
    
  } else if(state == photoOverlap) {
    String list[] = {"n1.bmp","n2.bmp","n3.bmp","n4.bmp","n5.bmp","n6.bmp","n7.bmp"};
    for (int a=0; a<7; a++){
       int r = random(a,6); //  random from a to 8 included.
       String temp = list[a];
       list[a] = list[r];
       list[r] = temp;
    }

    long startTime = millis();
     
     while(timesClicked < 20) {
      p = waitOneTouch();
      timesClicked++;
      bmpDraw(list[timesClicked % 7], random(-100,tft.width()), random(-100,tft.height()));  
      if(timesClicked % 7 == 0) {
        for (int a=0; a<7; a++){
           int r = random(a,6); //  random from a to 8 included.
           String temp = list[a];
           list[a] = list[r];
           list[r] = temp;
        }
      }
     }
     timesClicked = 0;
     state = sideBySide;
     tft.fillScreen(BLACK);
  } if(state == sideBySide) {
    String list[] = {"c1.bmp","c2.bmp","c3.bmp","c4.bmp","c5.bmp","c6.bmp"};
    Serial.println("height");
    Serial.println(tft.height());
    Serial.println("width");
    Serial.println(tft.width());
    
    for (int a=0; a<6; a++){
       int r = random(a,5); //  random from a to 8 included.
       String temp = list[a];
       list[a] = list[r];
       list[r] = temp;
    }
      
     while(timesClicked < 10) {
      p = waitOneTouch();
      timesClicked++;
      if(timesClicked % 2 == 0) {
         bmpDraw(list[timesClicked % 6], 0, 0); 
      } else {
        bmpDraw(list[timesClicked % 6], 0, tft.height() / 2); 
      }
      
      if(timesClicked % 6 == 0) {
        for (int a=0; a<6; a++){
           int r = random(a,5); //  random from a to 8 included.
           String temp = list[a];
           list[a] = list[r];
           list[r] = temp;
        }
      }
     }
     timesClicked = 0;

     while(timesClicked < 200) {
      tft.fillRoundRect(random(0, tft.width()), random(0, tft.height()), 7 , 120, 0, MAGENTA);
      p = waitOneTouch();
      timesClicked++;
     }
     timesClicked = 0; //reset time to 0, returns to button state, excluding the beginning text statement
     state = button;    //will return to the enum state loop  
  }
}

void artistStatement() {
  tft.fillScreen(BLACK);                        //Text function, includes size from 1-5, and Hex color
  tft.setCursor(0, 0);
  tft.setTextColor(YELLOW); tft.setTextSize(2);
  tft.setTextColor(RED);    tft.setTextSize(2);
  tft.println("Kit Vermillion");
  //tft.println(0xDEADBEEF, HEX);
  tft.println();
  tft.setTextColor(RED);
  tft.setTextSize(5);
  tft.println(" Title");
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.println(" artist statement");
  tft.setTextSize(2);
  tft.println(" artist statement");
  tft.println(" artist statement");
  tft.println(" artist statement");
  tft.println(" artist statement");
  tft.println(" artist statement");
  tft.println("  touch to open");
 
}

void testfillCircles(int radius, int color) {
 
  tft.fillScreen(CYAN);
  //tft.fillCircle(WHITE);
  int           x, y, r2 = radius * 3,
                w = tft.width()  + radius,
                h = tft.height() + radius;

  // Screen is not cleared for this one -- this is
  // intentional and does not affect the reported time.
  for(int c = 0; c < 10; c++) {
      //circleMatrix[c][CIRCLE_X] = random(-200, -50);
      circleMatrix[c][CIRCLE_Y] = random(0, tft.width());   //calling back to the circle matrix 
      circleMatrix[c][CIRCLE_COLOR] = BLACK;
      circleMatrix[c][CIRCLE_PREV_X] = random(-1000, 0);
  }

  long startTime = millis();

  //for(x=0 - 200; x<(w + 200); x+=r2) {
 while(millis() - startTime < 15000){
   
    
    for(int c = 0; c < 10; c++) {   //c is the circles
      Serial.println(c);
      if(circleMatrix[c][CIRCLE_PREV_X] > 0 && circleMatrix[c][CIRCLE_PREV_X] < tft.height()) {
        tft.fillCircle(circleMatrix[c][CIRCLE_PREV_X], circleMatrix[c][CIRCLE_Y] , radius + 1, CYAN);
      }
        
        if(circleMatrix[c][CIRCLE_PREV_X] > tft.height()) {
          circleMatrix[c][CIRCLE_PREV_X] = random(-1000, 0);//circleMatrix[c][CIRCLE_X];
        }
        
        circleMatrix[c][CIRCLE_PREV_X] += r2;
        if(circleMatrix[c][CIRCLE_PREV_X] > 0 && circleMatrix[c][CIRCLE_PREV_X] < tft.height()) {
          tft.drawCircle(circleMatrix[c][CIRCLE_PREV_X], circleMatrix[c][CIRCLE_Y] , radius, circleMatrix[c][CIRCLE_COLOR]);
        }
        
        delay(random(0, 50));
        
    } 
  }
startTime = millis();   
   while(millis() - startTime < 10000){   // starts random black circles to fill screen
     tft.fillCircle(random(0, tft.width()), random(0, tft.height()), radius, BLACK);  
   }
}

void createTouchTriangle(int x, int y, int triSize) {
  tft.fillScreen(BLACK);
  tft.fillTriangle(
      y - triSize, x   , // peak
      y + (triSize ), x - (triSize ), // bottom left
      y + (triSize ), x + (triSize ),  // bottom right
      GREEN);
}

void createTouchCircle(int x, int y, int radius) {
   tft.fillCircle(x, y , radius, GREEN);
}

void createTriangle() {
 int    i, cx = tft.width()  / 2 - 1,
           cy = tft.height() / 2 - 1;

  i = 50;

  tft.fillScreen(BLACK);
  //n     = min(cx, cy);
  //start = micros();

  //progmemPrintln(PSTR("cx = " + cx));
  //progmemPrintln(PSTR("cy = " + cy));
  Serial.println("");
  Serial.print("cx = ");
  Serial.print(cx);
  Serial.println("");
  Serial.print("cy = ");
  Serial.print(cy);
  Serial.println("");
  Serial.print("i = ");
  Serial.print(i);
  Serial.println("");
  
   tft.fillTriangle(
      0    , tft.height() / 2, // peak
      0, tft.height() - 1, // bottom left
      tft.width() / 2, tft.height() - 1, // bottom right
      GREEN);

}

void createButton(int x, int y) {
  int maxX = tft.width() - (120);   //button function
  int maxY = tft.height() - (40);
  
  if(x > maxX) {
    x = maxX;
  }
  if(y > maxY) {
    y = maxY;
  }
  
  tft.fillScreen(BLACK);
  
  tft.fillRoundRect(x, y, 120 , 40, 6, MAGENTA);
                                                    //fill screen with rectangles 
 tft.setCursor(x + 12, y + 13);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.println("Explore");     //text function for the button state
  
  return;
}



TSPoint waitOneTouch() {
  
  TSPoint p;
  
  do {
    p= ts.getPoint(); 
  
    pinMode(XM, OUTPUT); //Pins configures again for TFT control
    pinMode(YP, OUTPUT);
  
  } while((p.z < MINPRESSURE )|| (p.z > MAXPRESSURE));

  
  p.x = mapXValue(p);
  p.y = mapYValue(p);
  return p;
}



uint16_t mapXValue(TSPoint p) {

  uint16_t x = map(p.x, TS_MINX, TS_MAXX, 0, tft.width());

  //Correct offset of touch. Manual calibration
  //x+=1;
  
  return x;

}

// Map the coordinate Y

uint16_t mapYValue(TSPoint p) {

  uint16_t y = map(p.y, TS_MINY, TS_MAXY, 0, tft.height());

  //Correct offset of touch. Manual calibration
  //y-=2;

  return y;
}


void progmemPrint(const char *str) {
  char c;
  while(c = pgm_read_byte(str++)) Serial.print(c);
}

// Same as above, with trailing newline
void progmemPrintln(const char *str) {
  progmemPrint(str);
  Serial.println();
}

#define BUFFPIXEL 20
void bmpDraw(String filename, int x, int y) {

  File     bmpFile;
  int      bmpWidth, bmpHeight;   // W+H in pixels
  uint8_t  bmpDepth;              // Bit depth (currently must be 24)
  uint32_t bmpImageoffset;        // Start of image data in file
  uint32_t rowSize;               // Not always = bmpWidth; may have padding
  uint8_t  sdbuffer[3*BUFFPIXEL]; // pixel in buffer (R+G+B per pixel)
  uint16_t lcdbuffer[BUFFPIXEL];  // pixel out buffer (16-bit per pixel)
  uint8_t  buffidx = sizeof(sdbuffer); // Current position in sdbuffer
  boolean  goodBmp = false;       // Set to true on valid header parse
  boolean  flip    = true;        // BMP is stored bottom-to-top
  int      w, h, row, col;
  uint8_t  r, g, b;
  uint32_t pos = 0, startTime = millis();
  uint8_t  lcdidx = 0;
  boolean  first = true;

  if((x >= tft.width()) || (y >= tft.height())) return;

  Serial.println();
  Serial.print(F("Loading image '"));
  Serial.print(filename);
  Serial.println('\'');
  // Open requested file on SD card
  if ((bmpFile = SD.open(filename)) == NULL) {
    Serial.println(F("File not found"));
    return;
  }

  // Parse BMP header
  if(read16(bmpFile) == 0x4D42) { // BMP signature
    Serial.println(F("File size: ")); Serial.println(read32(bmpFile));
    (void)read32(bmpFile); // Read & ignore creator bytes
    bmpImageoffset = read32(bmpFile); // Start of image data
    Serial.print(F("Image Offset: ")); Serial.println(bmpImageoffset, DEC);
    // Read DIB header
    Serial.print(F("Header size: ")); Serial.println(read32(bmpFile));
    bmpWidth  = read32(bmpFile);
    bmpHeight = read32(bmpFile);
    if(read16(bmpFile) == 1) { // # planes -- must be '1'
      bmpDepth = read16(bmpFile); // bits per pixel
      Serial.print(F("Bit Depth: ")); Serial.println(bmpDepth);
      if((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed

        goodBmp = true; // Supported BMP format -- proceed!
        Serial.print(F("Image size: "));
        Serial.print(bmpWidth);
        Serial.print('x');
        Serial.println(bmpHeight);

        // BMP rows are padded (if needed) to 4-byte boundary
        rowSize = (bmpWidth * 3 + 3) & ~3;

        // If bmpHeight is negative, image is in top-down order.
        // This is not canon but has been observed in the wild.
        if(bmpHeight < 0) {
          bmpHeight = -bmpHeight;
          flip      = false;
        }

        // Crop area to be loaded
        w = bmpWidth;
        h = bmpHeight;
        if((x+w-1) >= tft.width())  w = tft.width()  - x;
        if((y+h-1) >= tft.height()) h = tft.height() - y;

        // Set TFT address window to clipped image bounds
        tft.setAddrWindow(x, y, x+w-1, y+h-1);

        for (row=0; row<h; row++) { // For each scanline...
          // Seek to start of scan line.  It might seem labor-
          // intensive to be doing this on every line, but this
          // method covers a lot of gritty details like cropping
          // and scanline padding.  Also, the seek only takes
          // place if the file position actually needs to change
          // (avoids a lot of cluster math in SD library).
          if(flip) // Bitmap is stored bottom-to-top order (normal BMP)
            pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
          else     // Bitmap is stored top-to-bottom
            pos = bmpImageoffset + row * rowSize;
          if(bmpFile.position() != pos) { // Need seek?
            bmpFile.seek(pos);
            buffidx = sizeof(sdbuffer); // Force buffer reload
          }

          for (col=0; col<w; col++) { // For each column...
            // Time to read more pixel data?
            if (buffidx >= sizeof(sdbuffer)) { // Indeed
              // Push LCD buffer to the display first
              if(lcdidx > 0) {
                tft.pushColors(lcdbuffer, lcdidx, first);
                lcdidx = 0;
                first  = false;
              }
              bmpFile.read(sdbuffer, sizeof(sdbuffer));
              buffidx = 0; // Set index to beginning
            }

            // Convert pixel from BMP to TFT format
            b = sdbuffer[buffidx++];
            g = sdbuffer[buffidx++];
            r = sdbuffer[buffidx++];
            lcdbuffer[lcdidx++] = tft.color565(r,g,b);
          } // end pixel
        } // end scanline
        // Write any remaining data to LCD
        if(lcdidx > 0) {
          tft.pushColors(lcdbuffer, lcdidx, first);
        }
        Serial.print(F("Loaded in "));
        Serial.print(millis() - startTime);
        Serial.println(" ms");
      } // end goodBmp
    }
  }
  
  bmpFile.close();
  if(!goodBmp) Serial.println(F("BMP format not recognized."));
}

uint16_t read16(File f) {
  uint16_t result;                                //file reading for the SD slot, do not edit 
  ((uint8_t *)&result)[0] = f.read(); // LSB
  ((uint8_t *)&result)[1] = f.read(); // MSB
  return result;
}

uint32_t read32(File f) {
  uint32_t result;
  ((uint8_t *)&result)[0] = f.read(); // LSB
  ((uint8_t *)&result)[1] = f.read();
  ((uint8_t *)&result)[2] = f.read();
  ((uint8_t *)&result)[3] = f.read(); // MSB
  return result;
}
